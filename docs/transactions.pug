extends layout

block append style
  link(rel="stylesheet" href="/docs/css/inlinecpc.css")
  script(type="text/javascript" src="/docs/js/native.js")

block content
  <a class="edit-docs-link" href="#{editLink}" target="_blank">
    <img src="/docs/images/pencil.svg" />
  </a>

  :markdown
    # Transactions in Mongoose

    <script>
      _native.init("CK7DT53U",{
        targetClass: 'native-inline'
      });
    </script>

    <div class="native-inline">
      <a href="#native_link#"><span class="sponsor">Sponsor</span> #native_company# â€” #native_desc#</a>
    </div>

    [Transactions](https://www.mongodb.com/transactions) are new in MongoDB
    4.0 and Mongoose 5.2.0. Transactions let you execute multiple operations
    in isolation and potentially undo all the operations if one of them fails.
    This guide will get you started using transactions with Mongoose.

    ## Getting Started with Transactions

    To create a transaction, you first need to create a session using or [`Mongoose#startSession`](/docs/api/mongoose.html#mongoose_Mongoose-startSession)
    or [`Connection#startSession()`](/docs/api/connection.html#connection_Connection-startSession).

    ```javascript
    const session = await mongoose.startSession();
    ```

    In practice, you should use either the [`session.withTransaction()` helper](https://mongodb.github.io/node-mongodb-native/3.2/api/ClientSession.html#withTransaction)
    or Mongoose's `Connection#transaction()` function to run a transaction. The `session.withTransaction()` helper handles:
    
    - Creating a transaction
    - Committing the transaction if it succeeds
    - Aborting the transaction if your operation throws
    - Retrying in the event of a [transient transaction error](https://stackoverflow.com/questions/52153538/what-is-a-transienttransactionerror-in-mongoose-or-mongodb).

    ```javascript
    [require:transactions.*withTransaction]
    ```

    For more information on the `ClientSession#withTransaction()` function, please see
    [the MongoDB Node.js driver docs](https://mongodb.github.io/node-mongodb-native/3.2/api/ClientSession.html#withTransaction). 

    Mongoose's `Connection#transaction()` function is a wrapper around `withTransaction()` that
    integrates Mongoose change tracking with transactions. For example, the `Connection#transaction()`
    function handles resetting a document if you `save()` that document in a transaction that later fails.

    ```javascript
    [require:transactions.*can save document after aborted transaction]
    ```

    ## With Mongoose Documents and `save()`

    If you get a [Mongoose document](/docs/documents.html) from [`findOne()`](/docs/api.html#findone_findOne)
    or [`find()`](/docs/api.html#find_find) using a session, the document will
    keep a reference to the session and use that session for [`save()`](/docs/api.html#document_Document-save).

    To get/set the session associated with a given document, use [`doc.$session()`](/docs/api.html#document_Document-$session).

    ```javascript
    [require:transactions.*save]
    ```

    ## With the Aggregation Framework

    The `Model.aggregate()` function also supports transactions. Mongoose
    aggregations have a [`session()` helper](/docs/api.html#aggregate_Aggregate-session)
    that sets the [`session` option](/docs/api.html#aggregate_Aggregate-option).
    Below is an example of executing an aggregation within a transaction.

    ```javascript
    [require:transactions.*aggregate]
    ```

    ## Advanced Usage

    Advanced users who want more fine-grained control over when they commit or abort transactions
    can use `session.startTransaction()` to start a transaction:

    ```javascript
    [require:transactions.*basic example]
    ```

    You can also use `session.abortTransaction()` to abort a transaction:

    ```javascript
    [require:transactions.*abort]
    ```